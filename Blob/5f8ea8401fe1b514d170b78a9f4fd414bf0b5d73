### 1、经统计，某计算机14条指令的使用频度分别为：0.01，0.15 0.12, 0.03, 0.02, 0.04, 0.02, 0.04, 0.01, 0.13, 0.15, 0.14, 0.11, 0.03。分别求出等长二进制编码，Huffman编码，只用两种码长的扩展操作码等三种方式的操作码平均码长度及各自信息冗余。

等长二进制编码平均码长度=$\lceil log_214\rceil$=4

huffman编码如图：

![image-20211107173414022](C:\Users\HP\AppData\Roaming\Typora\typora-user-images\image-20211107173414022.png)

huffman编码平均码长=0.15x3+0.15x3+0.13x3+0.12x3+0.14x3+0.04x5+0.03x5+0.03x5+0.02x5+0.11x3+0.04x4+0.02x5+0.01x6+0.01x6=3.38

只用两种码长的扩展操作码：

设两种码长分别为x,y(x<y)， 则满足$2^x-1+2^{(y-x)}>=14$ ,则满足要求的xy值为3,6 安排出现频率高的对应短码长

平均码长=(0.15+0.15+0.14+0.13+0.12+0.11+0.04)x3+(0.04+0.03+0.03+0.02+0.02+0.01+0.01)x6=3.48

理想最短码长=$ - \sum p_i\log_2p_i$=3.35

等长二进制编码冗余=1-3.35/4=16.25%

huffman编码冗余=1-3.35/3.38=0.89%

扩展码编码冗余=1-3.35/3.48=3.7%

### 2、某机指令字长16位，设有单地址指令和双地址指令两类。若每个地址字段均为6位，且双地址指令有X条，求单地址指令最多有多少条？

设单地址指令有Y条，则满足$Y<=(2^4-X)*2^6=1024-64*X$

最多有1024-64*X 条

### 3、以下C结构

```c++
 struct foo {
   char a;
   bool b;
   int c;
   double d;
   short e;
   float f;
   double g;
   char* cptr;
   float *fptr;
   int x;
 }
```

### 对于32位机器，foo结构的大小为多少？
### 若可以任意安排成员的顺序，这一结构最小为多少？
###  如用64位机器，结果又如何？

结构体对齐规则有如下三部分：

* 结构体中元素按照定义顺序依次置于内存中，但并不是紧密排列。从结构体首地址开始依次将元素放入内存时，元素会被放置在其自身对齐大小的整数倍地址上

* 如果结构体大小不是所有元素中最大对齐大小的整数倍，则结构体对齐到最大元素对齐大小的整数倍，填充空间放置到结构体末尾。

* 基本数据类型的对齐大小为其自身的大小，结构体数据类型的对齐大小为其元素中最大对齐大小元素的对齐大小。

  

若对于32位机器，其指针均为32位，并且需要满足对齐原则（四字节对齐）。所以在考虑填充的情况下，结构体大小为4+4+8+4+4+8+4+4+4=44，又因为整个结构体需要与最大元素对齐大小的整数倍，因而结构体大小为48字节

若可以任意安排顺序，则可以将short，char和bool安排在一起，共同占用4个字节，即：

```c++
 struct foo {
   short e;
   char a;
   bool b;
   int c;
   double d;
   float f;
   double g;
   char* cptr;
   float *fptr;
   int x;
 }
```

这样会节省4个字节，即结构体大小为40字节，并且与8字节对齐。

对于64位来说，其指针均为64位，考虑到4字节对齐，因而填充字节加上元素占用字节=4+4+8+4+4+8+8+8+4=52字节，考虑到与最大元素对齐字节对齐，则结构体大小为56字节。

如果任意安排顺序，则顺序安排与上面相同，节省4字节，将结构体大小缩小为48字节，48字节已经与8字节对齐。因而最终结构体大小为48字节。



